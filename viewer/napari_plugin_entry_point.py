from napari_plugin_engine import napari_hook_implementation
from openpyxl import load_workbook
from dask_image.imread import imread
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog, QFileDialog
from PyQt5.QtCore import pyqtSlot
from argparse import Namespace
from glob import glob
import os.path
from napari import Viewer
"""
each of these GUI files is generated by qtdesigner.
To generate a new .py file from the designer's .ui file, type this in terminal
pyuic5 -x <.ui input file> -o <.py output file>
"""

from pysero import run_pysero
from viewer.qtdesigner import data_viz #keep
from viewer.qtdesigner import acquisition #keep
from viewer.qtdesigner import plate_confirmation #keep



class Acquisition(QtWidgets.QWidget):
    def __init__(self, napari_viewer: Viewer):
        super().__init__()
        self.viewer = napari_viewer
        # print('foo')
        self.ui = acquisition.Ui_Form()
        self.ui.setupUi(self)

        list_widget = self.ui.listWidget
        wb = load_workbook(filename='test_metadata.xlsx')  # this file is eventually to be sent to Nautilus
        patient_metadata = wb['serum ID']

        index2alpha = {
            0: "b",
            1: "c",
            2: "d",
            3: "e",
            4: "f",
            5: "g",
            6: "h",
            7: "i",
            8: "j",
            9: "k",
            10: "l",
            11: "m"}
        i = 0
        infolist = []  # infolist does not need to be recreated each time, infolist can live as its own file to be imported in
        for i in range(0, 12):
            j = 1
            for j in range(2, 10):
                infolist.append(f"{index2alpha[i]}{j}")
        i = i + 1

        index2alpha_confirm = {
            0: "a",
            1: "b",
            2: "c",
            3: "d",
            4: "e",
            5: "f",
            6: "g",
            7: "h"}
        list_of_wells = []
        j = 1
        for j in range(1, 13):
            for b in range(0, 8):
                list_of_wells.append(f"{index2alpha_confirm[b]}{j}")
            j = j + 1
        # most code above this line can be imported in
        well_dict = dict(zip(infolist, list_of_wells))
        wells2image = []
        for b in range(0, 95):
            if not patient_metadata[infolist[b]].value is None:
                wells2image.append(well_dict[f'{infolist[b]}'])

        list_widget.addItems(wells2image)

        self.ui.pushButton.clicked.connect(self.plate_frame_click)
        self.ui.pushButton_2.clicked.connect(self.patient_info_click)
        self.ui.pushButton_3.clicked.connect(self.launch_confirmation)
        self.ui.pushButton_4.clicked.connect(self.edit_mode)
        self.ui.pushButton_5.clicked.connect(self.add_text)

    def launch_confirmation(self, napari_viewer: Viewer):
        dialog = QtWidgets.QDialog()
        dialog.ui = plate_confirmation.Ui_Dialog()
        dialog.ui.setupUi(dialog)
        list_widget = dialog.ui.listWidget
        plate = []
        wb = load_workbook(filename='test_config.xlsx')  # this file is eventually to be sent to Nautilus
        plate_metadata = wb['pysero output dirs']
        plate_id = plate_metadata['B7'].value
        plate.append(plate_id)
        list_widget.addItems(plate)
        dialog.exec()
        dialog.show()

    def edit_mode(self, napari_viewer: Viewer):
        list_widget = self.ui.listWidget
        for index in range(list_widget.count()):
            item = list_widget.item(index)
            item.setFlags(item.flags() | QtCore.Qt.ItemIsEditable)

    def add_text(self, napari_viewer: Viewer):
        list_widget = self.ui.listWidget
        text2add = []
        wells = self.ui.lineEdit_3.text()
        text2add.append(wells)
        list_widget.addItems(text2add)

    def plate_frame_click(self, napari_viewer: Viewer):
        plate_barcode = self.ui.lineEdit.text()
        wb = load_workbook(filename='test_config.xlsx')  # this file is eventually to be sent to Nautilus
        plate_metadata = wb['pysero output dirs']
        plate_metadata['B7'] = plate_barcode
        wb.save('test_config.xlsx')
        print(plate_barcode)

    def patient_info_click(self, napari_viewer: Viewer):
        patient_barcode = self.ui.lineEdit_2.text()
        wb = load_workbook(filename='test_metadata.xlsx')  # this file is eventually to be sent to Nautilus
        patient_metadata = wb['serum ID']
        index2alpha = {
            0: "b",
            1: "c",
            2: "d",
            3: "e",
            4: "f",
            5: "g",
            6: "h",
            7: "i",
            8: "j",
            9: "k",
            10: "l",
            11: "m"}
        i = 0
        infolist = []
        for i in range(0, 12):
            j = 1
            for j in range(2, 10):
                infolist.append(f"{index2alpha[i]}{j}")
        i = i + 1

        q = 0
        for q in range(0, 95):
            if patient_metadata[infolist[q]].value is None:
                patient_metadata[infolist[q]].value = patient_barcode
                wb.save('test_metadata.xlsx')
                break
            else:
                q = q + 1



class pysero_analysis(QtWidgets.QWidget):
    def __init__(self, napari_viewer: Viewer):
        super().__init__()
        self.viewer = napari_viewer
        self.ui = data_viz.Ui_Form()
        self.ui.setupUi(self)
        # self.ui.pushButton_2.clicked.connect(self.display)
        self.ui.pushButton_2.clicked.connect(self.browse_input_path)
        self.ui.pushButton_4.clicked.connect(self.browse_output_path)
        # self.ui.pushButton_3.clicked.connect(self.display)
        # self.ui.pushButton_6.clicked.connect(self.browse_output_path)
        self.ui.pushButton.clicked.connect(self.pysero_extract)
        self.ui.pushButton_7.clicked.connect(self.pysero_analyze)

    def browse_input_path(self):
        # self.ui.le_directory.setFocus()
        filename = QFileDialog.getExistingDirectory(self, 'Select Folder')
        self.ui.lineEdit.setText(filename)

    def browse_output_path(self):
        # self.ui.le_directory.setFocus()
        filename = QFileDialog.getExistingDirectory(self, 'Select Folder')
        self.ui.lineEdit_2.setText(filename)

    def pysero_extract(self, napari_viewer: Viewer):
        args = Namespace(input=self.ui.lineEdit.text(), output=self.ui.lineEdit_2.text(),
                         metadata='pysero_output_data_metadata.xlsx', debug=False, rerun=False, workflow='array_fit',
                         load_report=False, extract_od=True)
        run_pysero(args)
    def pysero_analyze(self, napari_viewer: Viewer):
        args = Namespace(input=self.ui.lineEdit.text(), output=self.ui.lineEdit_2.text(),
                         metadata='pysero_analysis_config.xlsx', debug=True, rerun=False, workflow='array_interp',
                         load_report=False, extract_od='', analyze_od=True)
        run_pysero(args)

        directory = self.ui.lineEdit.text()
        latest_folder = max([os.path.join(directory, d) for d in os.listdir(directory)], key=os.path.getmtime)
        file_type = '/*.png'
        file = glob(latest_folder + file_type)
        image_layer = imread(file[0])
        self.viewer.add_image(image_layer)


    def display(self, napari_viewer: Viewer):
        self.viewer = napari_viewer
        directory = self.ui.lineEdit.text()
        latest_folder = max([os.path.join(directory, d) for d in os.listdir(directory)], key=os.path.getmtime)
        file_type = '/*.png'
        file = glob(latest_folder + file_type)
        image_layer = imread(file[0])
        #viewer = napari.Viewer
        self.viewer.add_image(image_layer)


@napari_hook_implementation
def napari_experimental_provide_dock_widget():
    # you can return either a single widget, or a sequence of widgets
    # each widget is accessible as a new plugin that stacks in the side panel
    return [Acquisition, pysero_analysis]