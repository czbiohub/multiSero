# bchhun, {2020-03-22}

import numpy as np
import xmltodict

"""
The below code should parse the .xml

The functions generate np.ndarrays whose indices correspond to array positions
The values of the arrays depend on the function call
- populate_array_id : Cell id like "spot-6-2", "spot-5-5-" etc..
- populate_array_spots_type : Type like "Diagnostic", "Positive Control"
- populate_array_antigen : Antigen

"""


def create_xml_dict(path_):
    """
    receives an .xml file generated by the Scienion sciReader software
    returns dictionaries containing
        fiducials and control info
        spot info
        replicate info
        additional params

    :param path_: str
    :return: dict, dict, dict, dict
    """

    with open(path_) as fd:
        doc = xmltodict.parse(fd.read())

    # layout of array
    layout = doc['configuration']['well_configurations']['configuration']['array']['layout']

    # fiducials
    fiduc = layout['marker']

    # spot IDs
    spots = doc['configuration']['well_configurations']['configuration']['array']['spots']['spot']

    # replicates
    repl = doc['configuration']['well_configurations']['configuration']['array']['spots']['multiplet']

    params = dict()
    params['rows'] = int(layout['@rows'])
    params['columns'] = int(layout['@cols'])
    params['v_pitch'] = float(layout['@vspace'])
    params['h_pitch'] = float(layout['@hspace'])
    params['spot_width'] = float(layout['@expected_diameter'])
    params['bg_offset'] = float(layout['@background_offset'])
    params['bg_thickness'] = float(layout['@background_thickness'])
    params['max_diam'] = float(layout['@max_diameter'])
    params['min_diam'] = float(layout['@min_diameter'])

    return fiduc, spots, repl, params


def create_array(rows_, cols_):
    """
    creates an empty numpy array whose elements are long strings
    :param rows_: provided by params
    :param cols_: provided by params
    :return: np.ndarray
    """

    xml_numpy_array = np.empty(shape=(rows_, cols_), dtype=np.dtype('U100'))

    return xml_numpy_array


def populate_array_id(arr, spots):
    """
    receives an empty array
    populates the array with values corresponding to spot ID:
        ID like : "spot-1-2", "spot-2-4", "spot-3-3-", etc...

    :param arr: np.ndarray
        numpy array generated from "create_array"
    :param spots: dict
        dict from "create_xml_dict"
    :return: np.ndarray
        populated array
    """
    for spot in spots:
        r = int(spot['@row'])
        c = int(spot['@col'])
        ID = spot['@id']

        arr[r, c] = ID

    return arr


def populate_array_spots_type(arr, spots, fiduc):
    """
    receives an empty array
    populates the array with values corresponding to "spot_type":
        spot_type like : "Diagnostic", "PositiveControl", "NegativeControl"

    :param arr: np.ndarray
        numpy array generated from "create_array"
    :param spots: dict
        dict from "create_xml_dict"
    :param fiduc: dict
        dict from "create_xml_dict"
    :return: np.ndarray
        populated array
    """

    for spot in spots:
        r = int(spot['@row'])
        c = int(spot['@col'])
        v = spot['@spot_type']

        arr[r, c] = v

    for f in fiduc:
        r = int(f['@row'])
        c = int(f['@col'])
        v = f['@spot_type']

        arr[r, c] = v

    return arr


def populate_array_antigen(arr, id_arr_, repl):
    """
    populates an array with the antigen
    scannes through "replicate" in the .xml and assigns all spots the appropriate antigen

    :param arr: np.ndarray
        numpy array generated from "create_array"
    :param id_arr_: dict
        dict from "create_xml_dict"
    :param repl: dict
        dict from "create_xml_dict"
    :return: np.ndarray
        populated array
    """
    for rep in repl:
        antigen = rep['@id']
        all_spots = rep['id']  # list of IDs
        for spot in all_spots:
            arr[np.where(id_arr_ == spot)] = antigen

    return arr

