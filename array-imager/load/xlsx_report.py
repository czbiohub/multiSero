# bchhun, {2020-03-22}

from openpyxl import Workbook
from openpyxl.utils.cell import coordinate_from_string, column_index_from_string
from openpyxl.utils import get_column_letter

"""
1- create base template
2- fully parse xml and one well image
3- use output of 1 to call "populate main tab", supplying spotid, proparray, and well name (image file name)
4- repeat 2-3
"""


def create_base_template():
    """
    create an xlsx workbook to mimic that generated by sciReader
    this function generates some basic headers and worksheets

    :return: workbook
    """
    wb = Workbook()

    ws = wb.active
    ws.title = 'main spot report'
    # %%
    # main report
    ws['A1'].value = 'Test configuration'
    ws['A2'].value = '<NAME OF EXPERIMENT HERE>'

    ws['A6'].value = 'Intensity (median, background corrected) [AU]'
    ws['A7'].value = 'ID'

    ws['B1'].value = 'Configuration version'
    ws['B2'].value = '1.0'

    # REPLICATES TAB
    ws2 = wb.create_sheet(title='Replicates')
    ws2['A1'].value = 'Intensity (median, background corrected) [AU]'
    ws2['A2'].value = 'ID'

    return wb


def populate_main_tab(wb_, spot_id_array_, props_array_, well):
    """
    repeat this function call for EACH well/image that is added to report
        the same workbook is passed to each of those wells

    :param wb_:
    :param spot_id_array_:
    :param props_array_:
    :param well: str
    :return:
    """
    ws = wb_['main spot report']

    # find the next empty column
    maxc = 0
    for c in ws.iter_cols(2, None, 7, 7):
        maxc = c[0].column
    current_coln = maxc+1

    # add well to worksheet
    ws[get_column_letter(current_coln)+str(7)].value = well
    ws[get_column_letter(current_coln)+str(8)].value = well[-1]

    # populating main report Column A
    map_spot_cell = dict()
    num_spots = len(spot_id_array_.flatten())
    spot_id_array_flat = spot_id_array_.flatten()
    for r in range(11, 11 + num_spots):
        _ = ws.cell(column=1, row=r, value=spot_id_array_flat[r-11])
        map_spot_cell[spot_id_array_flat[r-11]] = 'A'+str(r)

    # walk through array and check position's cell ID
    # assign that array value to the xlsx cell based on cell ID
    for row in range(props_array_.shape[0]):
        for col in range(props_array_.shape[1]):
            # get cell corresponding to spot_id, use it to fill next value in xlsx

            if spot_id_array_[row, col] in map_spot_cell:
                pos_letter_idx = column_index_from_string(map_spot_cell[spot_id_array_[row, col]][0]) + current_coln
                pos_num = map_spot_cell[spot_id_array_[row, col]][1]
                # pos should INCREMENT column (letter) and keep row (number) the same
                pos = get_column_letter(pos_letter_idx)+pos_num

                # here we assign mean_intensity
                ws[pos].value = props_array_[row, col].mean_intensity

            else:
                raise AttributeError("unable to find cell ID in xlsx columns")

    return wb_


def populate_main_replicates(wb_, props_array_, well):
    ws = wb_['Replicates']

    # find the next empty column
    maxc = 0
    for c in ws.iter_cols(2, None, 2, 2):
        maxc = c[0].column
    current_coln = maxc + 1


    pass
